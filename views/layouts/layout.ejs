<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/dependencies/bootstrap-4/bootstrap-4.css">
    <link rel="stylesheet" href="/dependencies/fontawesome.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>

    <% if(req.session.authenticated) { %>
      <%- include('nav') %>
    <%}%>

    <% flash.get('error').forEach(function (message) { %>
    <div id="success" class="container">
      <div class="alert alert-danger">
        <button type="button" class="close" onclick="$('#success').hide();">&times;</button>
        <strong><%= message %></strong>
      </div>
    </div>
    <% }) %>

    <% flash.get('success').forEach(function (message) { %>
    <div id="success" class="container">
      <div class="alert alert-success">
        <button type="button" class="close" onclick="$('#success').hide();">&times;</button>
        <strong><%= message %></strong>
      </div>
    </div>
    <% }) %>


    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/bootstrap-4/bootstrap-4.bundle.js"></script>
    <script src="/dependencies/jquery.min.js"></script>
    <script src="/dependencies/jsrender.js"></script>
    <script src="/js/app.js"></script>
    <!--SCRIPTS END-->

    <script id="usersTemplate" type="text/x-jsrender">
      <div class="item row my-2">
        <div class="col-4 p-2 d-flex justify-content-end">
          <img class="rounded-circle w-50" src="{{:avatar}}">
        </div>
        <div class="col-8 content p-1 h-25 my-auto">
          <div class="h4">{{:fullname}}</div>
        </div>
      </div>
    </script>
    <script id="chatTemplate" type="text/x-jsrender">
      <div class="event row p-2">
        <div class="label col-2 d-flex justify-content-end">
           <img class="rounded-circle w-50" src="{{:avatar}}">
        </div>
        <div class="content col-10">
          <div class="summary">
            <a href="#"> {{:createdBy}} </a> posted on
              {{:createdAt}}
          </div>
          <div class="extra text">
               {{:message}}
          </div>
        </div>
      </div>
    </script>
    <script>

      window.onload = function() {
        loadUsers();
        loadMessages();
        activateChat();
      };

      function loadUsers() {
        // Load existing users
        io.socket.get('/user', (users, response) => {
          renderChatUsers(users);
        });

        // Listen for new & updated users
        io.socket.on('user', (body) => {
          io.socket.get('/user', (users, response) => {
            renderChatUsers(users);
          });
        });
      }

      function renderChatUsers(data) {
        const template = $.templates('#usersTemplate');
        let htmlOutput = template.render(data);
        $('#users-content').html(htmlOutput);
      }

    </script>
    <script type="text/javascript">

      function loadMessages() {
        // Load existing chat messages
        io.socket.get('/chatMessage', function(messages, response) {
          renderChatMessages(messages);
        });

        // Listen for new chat messages
        io.socket.on('chatmessage', function(body) {
          if (body.verb === 'published') {
            console.log(body);
          }
          console.log(body.data);
          io.socket.get('/chatMessage', function(messages, response) {
            renderChatMessages(messages);
          });
          renderChatMessages(body.data);
        });
      }

      function renderChatMessages(data) {
        const chatContent = $('#chat-content');
        const template = $.templates('#chatTemplate');
        let htmlOutput = template.render(data);
        chatContent.append(htmlOutput);
        // automatically scroll downwards
        const scrollHeight = chatContent.prop("scrollHeight");
        chatContent.animate({ scrollTop: scrollHeight }, "slow");
      }

    </script>
    <script type="text/javascript">

      function activateChat() {
        const postField = $('#post-field');
        const postButton = $('#post-btn');
        const postErr = $('#post-err');

        // Bind to click event
        postButton.click(postMessage);

        // Bind to enter key event
        postField.keypress(function(e) {
          var keycode = (e.keyCode ? e.keyCode : e.which);
          if (keycode == '13') {
            postMessage();
          }
        });

        function postMessage() {
          if(postField.val() == "") {
            alert("Please type a message!");
          } else {
            let text = postField.val();
            io.socket.post('/postMessage', { message: text, id:<%= req.session.userId %> }, function(resData, jwRes) {
              if(jwRes.statusCode != 200) {
                postErr.html("<p>" +  resData.message +"</p>")
                postErr.show();
              } else {
                postField.val(''); // clear input field
              }
            });
          }
        }
      }

    </script>
  </body>
</html>
